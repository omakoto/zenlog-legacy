#!/bin/bash

# Zenlog main.

set -e

usage() {
  cat <<'EOF'

Zenlog

  Start a new shell where all input/output from each command will be saved
  in a separate file.

  Make sure to update PS1 and include $(zenlog_prompt_marker) in it.  See below.

Usage:
  zenlog [-d LOG_DIR]
    Start a new shell.

  zenlog -p DAYS
    Purge logs older than N days and exit.

  zenlog -f
    Show the free space size of the log disk in 1K blocks.

  . <(zenlog -s)
     Install the helper functions on a bash-like shell.
     Commands are:
      - zenlog_prompt_marker
          Print the command separator marker. Include it in the prompt.
          Example:
            PS1="$(zenlog_prompt_marker) > "

      - 184 COMMAND [args...]
          Run the passed command without logging the output.
          Example:
            184 emacs

      - in_zenlog
          Return success if alreay in zenlog.
          Example:
            in_zenlog && echo "in zenlog"

      - zenlog_last_log [-r] [-n N] [-p ZENLOG_PID]
          Print the last sanitized log filename.
          -r will print the raw log filename instead.
          -n to specify which previous log to show -- default is 1 to show the
             last log.  0 is current, 2 is the second last.
          -p to show other zenlog's log file instead.

      - zenlog_open_last_log [-r] [-n N] [-p ZENLOG_PID]
          Open the last sanitized log with $ZENLOG_VIEWER or $PAGER.
          -r, -n, -p have the same meaning as zenlog_last_log.

      - zenlog_cat_last_log [-r] [-n N] [-p ZENLOG_PID]
          Cat the last sanitized log.
          -r, -n, -p have the same meaning as zenlog_last_log.

      - zenlog_history [-r] [-n N] [-p ZENLOG_PID]
          Show the last N sanitized log filenames.
          -r will show the raw log filenames instead.
          -r, -n, -p have the same meaning as zenlog_last_log
            except when -n is omitted it'll show all the log files in the
            history.

      - zenlog_echo_command COMMAND [opts...]
          If you use this to echo back the command line that's being
          executed in the pre-exec hook (i.e. PS0), zenlog will recognize the
          current command, clean up the command line line and also
          perform auto-184.
          See also ZENLOG_ALWAYS_184.

      - zenlog_du
          Execute du on the log directory.
          Example:
            zenlog_du -h

  Environmental variables:
    ZENLOG_DIR
          Specify log file directory.

    ZENLOG_ALWAYS_184
          Regex to match command names that shouldn't be logged.
          (^ and $ are assumed.)
          Needs to be used with zenlog_echo_command.
          Example: export ZENLOG_ALWAYS_184="(vi|emacs|man|zenlog.*)"

    ZENLOG_COMMAND_PREFIX
          Regex to match "prefix" commands, such as "time" and "builtin".
          (^ and $ are assumed.)
          This allows, e.g., a command "time ls -l" to be handled as "ls -l".
          Example: export ZENLOG_COMMAND_PREFIX="(builtin|time)"

EOF
  exit 1
}

# Optionally get environmental variables from ~/.zenlogrc
if [[ -f "$HOME/.zenlogrc" ]] ; then
  . "$HOME/.zenlogrc"
fi

my_full_name="$(readlink -f "$0")"
my_name="$(basename "$my_full_name")"

. "$my_full_name.bash"

temp=${TEMP:-${TMP:-/tmp}}
log_dir=${ZENLOG_DIR:-${temp}/zenlog}

shell_helper=0
purge_days=-1
purge_yes=0
purge_delete_command="-delete"
show_free_space=0
: ${ZENLOG_START_COMMAND:="$SHELL -l"}

while getopts "fsd:hp:yc:P" opt; do
  case "$opt" in
    s) shell_helper=1 ;;
    d) log_dir="$OPTARG" ;;
    p) purge_days="$OPTARG" ;;
    P) purge_delete_command="-print" ;;
    y) purge_yes=1 ;;
    c) ZENLOG_START_COMMAND="$OPTARG" ;;
    f) show_free_space=1 ;;
    *) usage;
  esac
done
shift $(($OPTIND - 1))

# Handle -f.
if (( $show_free_space )) ; then
  df --output=avail $ZENLOG_DIR/ | sed -e 1d
  exit ${PIPESTATUS[0]}
fi

# Handle -p.
if (( $purge_days >= 0 )) ; then
  if ! (( $purge_yes )) ; then
    echo -n "$my_name: Purging logs older than $purge_days days? (y/N) "
    read res
    [[ "$res" == "y" || "$res" == "Y" ]] || exit 1
  fi
  # First, remove old log files.
  find "$log_dir/" -mindepth 1 \( -type f -o -type l \) \
      -ctime +$(( $purge_days - 1 )) $purge_delete_command || true

  # Remove broken links.
  find "$log_dir/" -xtype l -delete || true

  # Then, remove all empty directories.
  while true; do
    removed="$(find "$log_dir/" -mindepth 1 -type d -empty -print -delete)"
    if [[ -z "$removed" ]] ; then
      break
    fi
  done
  exit 0
fi

# Handle -s.
if (( $shell_helper )) ; then
  cat "$my_full_name.bash"
  exit 0
fi

# Handle zenlog sub-command
if (( $# > 0 )) ; then
  subcommand="$1"
  shift
  candidate="zenlog_${subcommand}"
  for full_command in \
      "$candidate" \
      "${candidate//-/_}" \
      "${candidate//_/-}"; do
    if type "$full_command" >&/dev/null ; then
      "$full_command" "$@"
      exit $?
    fi
  done
  echo "$my_name: Unknown subcommand: $subcommand." 1>&2
  exit 1
fi

# Start

if in_zenlog ; then
  echo "$my_name: Error: already in zenlog." 1>&2
  exit 1
fi

export ZENLOG_START_COMMAND
export ZENLOG_CUR_LOG_DIR=$log_dir
export ZENLOG_PID=$$
export ZENLOG_OUTER_TTY=$(tty)
export ZENLOG_ALWAYS_184
export ZENLOG_COMMAND_PREFIX # Example: (builtin|time)

echo "$my_name: Logging to $ZENLOG_CUR_LOG_DIR ..."
rm -fr "$ZENLOG_CUR_LOG_DIR/pids/$ZENLOG_PID"
exec script -qf \
    -c 'export ZENLOG_TTY=$(tty); exec $ZENLOG_START_COMMAND' \
    >( exec "$my_full_name.pl" )
